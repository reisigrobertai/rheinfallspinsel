<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="title" content="Glücksrad Deluxe">
    <meta name="description" content="Spießroulette Premium">
    <meta name="image" content="/LogoPlain.jpg"> 
    <link rel="icon" type="image/svg" href="/LogoPlainSVG.svg">
    <title>Rheinfallspinsel - Spießroulette Premium</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --gold-gradient: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
            --neon-cyan: #00ffff;
            --neon-magenta: #ff00ff;
            --neon-yellow: #ffff00;
            --dark-bg: #0a0a0a;
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            min-height: 100vh;
            background: var(--dark-bg);
            color: white;
            overflow-x: hidden;
            position: relative;
        }

        /* Animated Background */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
            overflow: hidden;
        }

        .gradient-bg {
            position: absolute;
            width: 200%;
            height: 200%;
            top: -50%;
            left: -50%;
            background: radial-gradient(ellipse at center, #1a1a2e 0%, #0a0a0a 50%);
            animation: rotateGradient 20s ease infinite;
        }

        @keyframes rotateGradient {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.2); }
            100% { transform: rotate(360deg) scale(1); }
        }

        /* Particle System */
        .particles {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: var(--neon-cyan);
            border-radius: 50%;
            filter: blur(1px);
            animation: floatParticle linear infinite;
            box-shadow: 0 0 10px var(--neon-cyan);
        }

        @keyframes floatParticle {
            from {
                transform: translateY(100vh) translateX(0);
                opacity: 0;
            }
            10% { opacity: 1; }
            90% { opacity: 1; }
            to {
                transform: translateY(-100vh) translateX(100px);
                opacity: 0;
            }
        }

        /* Neon Grid */
        .neon-grid {
            position: absolute;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: gridMove 10s linear infinite;
        }

        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }

        /* Main Container */
        .main-container {
            position: relative;
            z-index: 10;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        /* Title */
        .title {
            font-size: clamp(1.8rem, 5vw, 3.5rem);
            font-weight: 900;
            text-align: center;
            margin-bottom: 2rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
            animation: titleGlow 3s ease-in-out infinite;
            position: relative;
        }

        @keyframes titleGlow {
            0%, 100% { filter: brightness(1); }
            50% { filter: brightness(1.2); }
        }

        .title::after {
            content: 'GLÜCKSRAD DELUXE';
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            z-index: -1;
            animation: titleShift 4s ease-in-out infinite;
        }

        @keyframes titleShift {
            0%, 100% { transform: translate(0, 0); }
            50% { transform: translate(3px, 3px); }
        }

        /* Wheel Container */
        .wheels-container {
            display: flex;
            gap: 3rem;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 2rem;
        }

        /* Individual Wheel */
        .wheel-wrapper {
            position: relative;
            width: 240px;
            height: 240px;
            perspective: 1000px;
        }

        .wheel {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            cursor: pointer;
        }

        .wheel:hover {
            transform: rotateY(15deg) rotateX(-10deg) scale(1.05);
        }

        .wheel-face {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 700;
            backdrop-filter: blur(10px);
            background: var(--glass-bg);
            border: 2px solid var(--glass-border);
            box-shadow: 
                0 0 40px rgba(0, 255, 255, 0.5),
                inset 0 0 40px rgba(255, 255, 255, 0.1);
            overflow: hidden;
        }

        .wheel-face::before {
            content: '';
            position: absolute;
            width: 150%;
            height: 150%;
            background: conic-gradient(
                from 0deg,
                transparent,
                var(--neon-cyan),
                transparent,
                var(--neon-magenta),
                transparent
            );
            animation: wheelSpin 4s linear infinite;
            opacity: 0.3;
        }

        @keyframes wheelSpin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .wheel-face::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(
                circle at 30% 30%,
                rgba(255, 255, 255, 0.3),
                transparent 50%
            );
            border-radius: 50%;
        }

        .wheel-content {
            position: relative;
            z-index: 1;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 2px;
            padding: 10px;
            width: 90%;
        }

        .wheel-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 0.5rem;
        }

        .wheel-value {
            font-size: 1.8rem;
            text-shadow: 0 0 20px currentColor;
            word-break: break-word;
            line-height: 1.2;
            max-width: 100%;
        }

        #numberWheel .wheel-face {
            background: linear-gradient(135deg, rgba(255, 0, 0, 0.1), rgba(255, 100, 0, 0.1));
            border-color: rgba(255, 0, 0, 0.3);
            color: #ff6b6b;
        }

        #nameWheel .wheel-face {
            background: linear-gradient(135deg, rgba(0, 123, 255, 0.1), rgba(0, 200, 255, 0.1));
            border-color: rgba(0, 123, 255, 0.3);
            color: #4dabf7;
        }

        /* Spinning Animation */
        .wheel.spinning .wheel-face {
            animation: superSpin 0.1s linear infinite;
        }

        @keyframes superSpin {
            0% { transform: rotateZ(0deg); }
            100% { transform: rotateZ(360deg); }
        }

        /* Control Panel */
        .control-panel {
            display: flex;
            gap: 2rem;
            margin-bottom: 1rem;
        }

        .spin-button {
            padding: 0.8rem 2.5rem;
            font-size: 1.1rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 2px;
            background: var(--accent-gradient);
            border: none;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.4);
        }

        .spin-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(79, 172, 254, 0.6);
        }

        .spin-button:active {
            transform: translateY(0);
        }

        .spin-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.5);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .spin-button:active::before {
            width: 300px;
            height: 300px;
        }

        .spin-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Result Display */
        .result-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
            padding: 20px;
        }

        .result-overlay.active {
            display: flex;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .result-content {
            text-align: center;
            animation: resultBounce 0.6s ease;
            max-width: 90vw;
        }

        @keyframes resultBounce {
            0% { transform: scale(0) rotate(180deg); }
            50% { transform: scale(1.2) rotate(90deg); }
            100% { transform: scale(1) rotate(0deg); }
        }

        .result-title {
            font-size: clamp(2.5rem, 7vw, 5rem);
            font-weight: 900;
            background: var(--gold-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1.5rem;
            animation: resultGlow 1s ease infinite alternate;
        }

        @keyframes resultGlow {
            from { filter: brightness(1) drop-shadow(0 0 20px gold); }
            to { filter: brightness(1.3) drop-shadow(0 0 40px gold); }
        }

        .result-details {
            font-size: clamp(1.2rem, 3.5vw, 2rem);
            margin-bottom: 1rem;
            color: white;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
            line-height: 1.4;
            word-wrap: break-word;
            padding: 0 20px;
        }

        .result-name {
            display: block;
            margin-bottom: 0.5rem;
            font-size: clamp(1.4rem, 4vw, 2.3rem);
            color: var(--neon-cyan);
        }

        .result-strokes {
            display: block;
            font-size: clamp(1.1rem, 3vw, 1.8rem);
            color: var(--neon-magenta);
        }

        .result-phrase {
            font-size: clamp(0.9rem, 2.2vw, 1.3rem);
            font-style: italic;
            opacity: 0.8;
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
            padding: 0 20px;
        }

        /* Confetti */
        .confetti-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1001;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background: var(--neon-cyan);
            animation: confettiFall 3s ease-out forwards;
        }

        @keyframes confettiFall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }

        /* Audio Controls */
        .audio-controls {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 100;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            border: 1px solid var(--glass-border);
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .audio-controls:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .audio-icon {
            width: 24px;
            height: 24px;
            position: relative;
        }

        .audio-icon::before {
            content: '🔊';
            font-size: 20px;
        }

        .audio-controls.muted .audio-icon::before {
            content: '🔇';
        }

        /* Audio Status */
        .audio-status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            border: 1px solid var(--glass-border);
            font-size: 0.8rem;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .audio-status.visible {
            opacity: 0.8;
        }

        /* Keyboard Help */
        .keyboard-help {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            padding: 0.5rem 1rem;
            border-radius: 10px;
            border: 1px solid var(--glass-border);
            font-size: 0.8rem;
            opacity: 0.5;
            transition: opacity 0.3s ease;
        }

        .keyboard-help:hover {
            opacity: 1;
        }

        .keyboard-help kbd {
            background: rgba(255, 255, 255, 0.1);
            padding: 2px 6px;
            border-radius: 3px;
            font-family: monospace;
            margin: 0 2px;
        }

        /* Mobile Optimizations */
        @media (max-width: 768px) {
            .main-container {
                padding: 15px;
                justify-content: flex-start;
                padding-top: 60px;
            }

            .title {
                margin-bottom: 1.5rem;
            }

            .wheels-container {
                gap: 1.5rem;
            }

            .wheel-wrapper {
                width: 160px;
                height: 160px;
            }

            .wheel-value {
                font-size: 1.3rem;
            }

            .wheel-label {
                font-size: 0.7rem;
            }

            .control-panel {
                flex-direction: column;
                width: 100%;
                max-width: 250px;
            }

            .spin-button {
                width: 100%;
                padding: 0.8rem 2rem;
                font-size: 1rem;
            }

            .audio-controls {
                bottom: 10px;
                left: 10px;
                padding: 0.4rem 0.8rem;
            }

            .keyboard-help {
                display: none;
            }

            .audio-status {
                top: 10px;
                right: 10px;
                font-size: 0.7rem;
            }
        }

        @media (max-width: 480px) {
            .wheel-wrapper {
                width: 140px;
                height: 140px;
            }

            .wheel-value {
                font-size: 1.1rem;
            }
        }

        @media (max-height: 700px) and (max-width: 768px) {
            .main-container {
                padding-top: 40px;
            }

            .title {
                font-size: 1.5rem;
                margin-bottom: 1rem;
            }

            .wheel-wrapper {
                width: 140px;
                height: 140px;
            }

            .sound-waves {
                height: 60px;
            }
        }

        /* Reduced Motion */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.001ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.001ms !important;
            }
        }

        /* Pulse Effect */
        .pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle, transparent, var(--neon-cyan));
            animation: pulse 2s ease-out;
            pointer-events: none;
        }

        @keyframes pulse {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }

        /* Sound Wave Visualization */
        .sound-waves {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 80px;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            gap: 4px;
            pointer-events: none;
            z-index: 5;
        }

        .wave-bar {
            width: 4px;
            background: linear-gradient(to top, var(--neon-cyan), transparent);
            animation: wave 1s ease-in-out infinite;
            opacity: 0.3;
        }

        @keyframes wave {
            0%, 100% { height: 20px; }
            50% { height: 50px; }
        }
    </style>
</head>
<body>
    <!-- Audio Elements - Simple HTML5 Audio -->
    <audio id="backgroundAudio" loop preload="auto">
        <source src="audios/background.mp3" type="audio/mpeg">
    </audio>
    <audio id="spinAudio" preload="auto">
        <source src="audios/spin.mp3" type="audio/mpeg">
    </audio>
    <audio id="tensionAudio" loop preload="auto">
        <source src="audios/tension.mp3" type="audio/mpeg">
    </audio>
    <audio id="applaudAudio" preload="auto">
        <source src="audios/applaud.mp3" type="audio/mpeg">
    </audio>

    <!-- Audio Status -->
    <div class="audio-status" id="audioStatus">Audio wird geladen...</div>

    <!-- Audio Controls -->
    <div class="audio-controls muted" id="audioControls">
        <div class="audio-icon"></div>
        <span>Sound</span>
    </div>

    <!-- Background Elements -->
    <div class="background-container">
        <div class="gradient-bg"></div>
        <div class="neon-grid"></div>
        <div class="particles" id="particles"></div>
    </div>

    <!-- Sound Waves -->
    <div class="sound-waves" id="soundWaves"></div>

    <!-- Main Content -->
    <div class="main-container">
        <h1 class="title">GLÜCKSRAD DELUXE</h1>

        <div class="wheels-container">
            <!-- Number Wheel -->
            <div class="wheel-wrapper">
                <div class="wheel" id="numberWheel">
                    <div class="wheel-face">
                        <div class="wheel-content">
                            <div class="wheel-label">Anzahl</div>
                            <div class="wheel-value" id="numberValue">?</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Name Wheel -->
            <div class="wheel-wrapper">
                <div class="wheel" id="nameWheel">
                    <div class="wheel-face">
                        <div class="wheel-content">
                            <div class="wheel-label">Name</div>
                            <div class="wheel-value" id="nameValue">?</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="control-panel">
            <button class="spin-button" id="spinBoth">Beide drehen!</button>
        </div>
    </div>

    <!-- Result Overlay -->
    <div class="result-overlay" id="resultOverlay">
        <div class="result-content">
            <h2 class="result-title">GEWINNER!</h2>
            <div class="result-details">
                <span class="result-name" id="resultName"></span>
                <span class="result-strokes"><span id="resultNumber"></span> Striche</span>
            </div>
            <div class="result-phrase" id="resultPhrase"></div>
        </div>
    </div>

    <!-- Confetti Container -->
    <div class="confetti-container" id="confettiContainer"></div>

    <!-- Keyboard Help -->
    <div class="keyboard-help">
        <kbd>Leertaste</kbd> Drehen | <kbd>ESC</kbd> Schließen | <kbd>M</kbd> Mute
    </div>

    <script>
        // Game Data
        const names = [
            "Ferdinand I (Reytschack)", 
            "Jonas von der Feuerwehr", 
            "Johannes B. Beeten", 
            "Enno aus Köln", 
            "Rolls Royce Robert", 
            "Ferdinand II (Henze)", 
            "Fréddé", 
            "Jakob II (Alberts)", 
            "Frisch", 
            "Ole", 
            "Kalle", 
            "Maxi", 
            "S.M. Max I", 
            "Leonard Wehrmeister", 
            "Michi von der Feuerwehr", 
            "Fabi der Schnelle",
            "Anselm",
            "Eicker",
            "Heinrich"
        ];

        const shortNames = [
            "Oberleutnant",
            "Leutnant",
            "Spieß",
            "Enno",
            "Robert",
            "Henze",
            "Fredde",
            "Jakob A.",
            "Seppel",
            "Jakob O.",
            "Kalle",
            "Maxi",
            "S.M. Max",
            "Lennart",
            "Michi",
            "Fabi",
            "Anselm",
            "Eicker",
            "Heinrich"
        ];

        const phrases = [
            "Wow, du bist so unglaublich talentiert.",
            "Herzlichen Glückwunsch! Deine Fähigkeit, alle anderen zu überraschen, ist wirklich beeindruckend.",
            "Bravo! Deine Leistung ist wirklich außergewöhnlich.",
            "Ein Meister ist geboren!",
            "Du hast es geschafft, allen anderen zu beweisen, dass du immer im Mittelpunkt stehen kannst.",
            "Großartig! Deine Fähigkeiten sind bewundernswert.",
            "Hervorragend! Du bist wie ein lebendiger Beweis dafür, dass nicht alles auf der Welt schlecht ist.",
            "Warum so wenig?",
            "Nochmal!!!",
            "Mehr, mehr, mehr …",
            "Herrlich!",
            "Gratulation! Du bist der wahre Held der unerwarteten Wendungen.",
            "Ein weiterer Höhepunkt in deiner Karriere bei den Rheinfallspinseln.",
            "Fantastisch!",
            "Wie hast du das nur geschafft?",
            "Du machst uns alle stolz.",
            "Ein wahrer Glückspilz.",
            "Hochmut kommt vor dem Fall.",
            "Das ist fair.",
            "Super! Deine Eltern wären stolz auf dich.",
            "Kaum zu glauben.",
            "Sensationell! Das Glücksrad hat einen würdigen Champion gefunden.",
            "Die Sterne haben sich für dich ausgerichtet – oder war es nur Zufall?",
            "Beeindruckend! Fast so gut wie letztes Mal.",
            "Du hast gewonnen! Die anderen hatten eh keine Chance.",
            "Phänomenal! Das muss gefeiert werden – aber nicht zu lange.",
            "Ein historischer Moment für die Chroniken der Rheinfallspinsel!",
            "Unglaublich! Niemand hätte das vorhersehen können. Wirklich niemand.",
            "Das Schicksal hat gesprochen – und es mag dich anscheinend.",
            "Respekt! Du hast das Unmögliche möglich gemacht: Du hast gewonnen.",
            "Legendär! Dieser Moment wird in die Geschichte eingehen. Vielleicht.",
            "Du bist der Auserwählte! Zumindest für die nächsten Sekunden.",
            "Triumphierend! Wie ein Phönix aus der Asche – nur weniger dramatisch.",
            "Das war ja klar! Also eigentlich nicht, aber jetzt schon.",
            "Meisterhaft! Du hast das Rad bezwungen – es hatte keine Chance.",
            "Glückwunsch! Die Wahrscheinlichkeit war auf deiner Seite. Diesmal.",
            "Episch! Wie eine Sage aus alten Zeiten, nur aktueller.",
            "Du hast es allen gezeigt! Wobei \"es\" noch zu definieren wäre.",
            "Brilliant! Deine Strategie hat sich ausgezahlt. Welche Strategie?",
            "Unfassbar! Das hätte auch anders ausgehen können. Ist es aber nicht.",
            "Der Olymp ruft nach dir! Oder war das nur der Applaus?",
            "Majestätisch! Wie ein König auf seinem Thron. Nur ohne Thron.",
            "Das war dein Moment! Genieße ihn, er kommt so schnell nicht wieder.",
            "Überragend! Die anderen können einpacken. Wortwörtlich.",
            "Du bist ein Naturtalent! Die Natur ist manchmal seltsam.",
            "Grandios! Fast so gut wie der Gewinner von vorhin.",
            "Das Universum hat entschieden – du warst die beste Option.",
            "Spektakulär! Wie ein Feuerwerk, nur leiser.",
            "Du hast Geschichte geschrieben! Eine sehr kurze Geschichte.",
            "Bemerkenswert! Das werden wir so schnell nicht vergessen. Oder doch?",
            "Ein Geniestreich! Einstein wäre beeindruckt. Oder verwirrt.",
            "Du bist der Held des Tages! Der Tag ist aber noch jung.",
            "Fulminant! Wie ein Gewitter im Wasserglas.",
            "Das war Schicksal! Oder einfach nur Mathematik.",
            "Atemberaubend! Wir schnappen alle nach Luft.",
            "Du hast es verdient! Sagen zumindest die Regeln.",
            "Kolossal! Wie David gegen Goliath, nur ohne Kampf.",
            "Ein Meisterwerk der Glückskunst!",
            "Donnerwetter! Zeus himself wäre neidisch.",
            "Du bist unstoppbar! Zumindest bis zum nächsten Spiel.",
            "Fabelhaft! Wie aus einem Märchen, nur realer.",
            "Das war deine Sternstunde! Sie dauert genau 60 Minuten.",
            "Überirdisch! Außerirdische würden applaudieren.",
            "Du hast das System geknackt! Es war gar nicht verschlüsselt.",
            "Monumental! Wie die Pyramiden, nur vergänglicher.",
            "Ein Volltreffer! Das Glücksrad hat dich erwählt.",
            "Sagenhaft! Barden werden Lieder über dich singen. Vielleicht.",
            "Du bist die lebende Legende! Zumindest für diesen Augenblick.",
            "Titanisch! Selbst die Titanic wäre beeindruckt.",
            "Das war Perfektion! Mit kleinen Schönheitsfehlern.",
            "Glorreicher Sieg! Die Glorie hält bis zum nächsten Dreh.",
            "Chapeau! Das war eine Meisterleistung der Zufallskunst.",
            "Du hast das Rad neu erfunden! Naja, eigentlich nur gedreht.",
            "Fantastique! Wie die Franzosen sagen würden.",
            "Das war so smooth wie Butter auf heißem Toast.",
            "Jackpot! Naja, fast. Okay, nicht wirklich. Aber trotzdem gut!",
            "Du bist der Mozart des Glücksrads! Nur ohne die Musik.",
            "Exzellent! Das Rad hat dich als würdig befunden.",
            "Wie ein Ninja! Lautlos, präzise und... zufällig.",
            "Das war cinematisch! Hollywood ruft schon an.",
            "Bingo! Falsches Spiel, aber der Enthusiasmus stimmt.",
            "Du hast den Code geknackt! Es gab keinen, aber egal.",
            "Wie ein Profi! Ein sehr glücklicher Profi.",
            "Das war so elegant wie ein Schwan auf Rollschuhen.",
            "Touchdown! Wieder falsches Spiel, aber wer zählt schon.",
            "Du bist der Picasso des Zufalls! Abstrakt und unvorhersehbar.",
            "Galaktisch gut! Die Milchstraße applaudiert.",
            "Das war smoother als ein frisch gewachster Dancefloor.",
            "Olympiareif! Die Disziplin gibt es zwar nicht, aber trotzdem.",
            "Du hast das Unmögliche geschafft! Also... das Mögliche.",
            "Wie ein Magier! Ohne Tricks, nur mit purem Glück.",
            "Das war so süß wie Zuckerwatte auf dem Jahrmarkt.",
            "Bombastisch! Das Feuerwerk ist schon bestellt.",
            "Du bist der Beethoven des Glücks! Taub für Niederlagen.",
            "Wie geschmiert! Das Rad läuft für dich wie geölt.",
            "Das war präziser als ein Schweizer Uhrwerk! Nur zufälliger.",
            "Du hast die Matrix durchschaut! Oder einfach Glück gehabt.",
            "Sensationell! Die Zeitungen drucken schon die Schlagzeilen.",
            "Das war so geschmeidig wie ein Delfin im Wasser.",
            "Du bist der Champion der Herzen! Und der Zufallszahlen."
        ];

        // Audio Elements
        const audioElements = {
            background: document.getElementById('backgroundAudio'),
            spin: document.getElementById('spinAudio'),
            tension: document.getElementById('tensionAudio'),
            applaud: document.getElementById('applaudAudio')
        };

        // Game State
        let isSpinning = false;
        let selectedName = '';
        let selectedNumber = 0;
        let selectedIndex = 0;
        let isMuted = true;
        let audioUnlocked = false;
        let isFirstUnmute = true;

        // DOM Elements
        const numberWheel = document.getElementById('numberWheel');
        const nameWheel = document.getElementById('nameWheel');
        const numberValue = document.getElementById('numberValue');
        const nameValue = document.getElementById('nameValue');
        const spinButton = document.getElementById('spinBoth');
        const resultOverlay = document.getElementById('resultOverlay');
        const resultName = document.getElementById('resultName');
        const resultNumber = document.getElementById('resultNumber');
        const resultPhrase = document.getElementById('resultPhrase');
        const confettiContainer = document.getElementById('confettiContainer');
        const particles = document.getElementById('particles');
        const soundWaves = document.getElementById('soundWaves');
        const audioControls = document.getElementById('audioControls');
        const audioStatus = document.getElementById('audioStatus');

        // Audio Functions
        function unlockAllAudio() {
            if (audioUnlocked) return;
            
            // Show status
            audioStatus.textContent = 'Audio wird aktiviert...';
            audioStatus.classList.add('visible');
            
            // Unlock all audio elements by playing them silently
            Object.values(audioElements).forEach(audio => {
                audio.volume = 0;
                const promise = audio.play();
                if (promise) {
                    promise.then(() => {
                        audio.pause();
                        audio.currentTime = 0;
                        audio.volume = 1;
                    }).catch(() => {
                        audio.pause();
                        audio.currentTime = 0;
                        audio.volume = 1;
                    });
                } else {
                    audio.pause();
                    audio.currentTime = 0;
                    audio.volume = 1;
                }
            });
            
            audioUnlocked = true;
            
            // Update status
            setTimeout(() => {
                audioStatus.textContent = 'Audio bereit';
                setTimeout(() => {
                    audioStatus.classList.remove('visible');
                }, 1000);
            }, 500);
        }

        function playAudio(name, loop = false) {
            if (!audioUnlocked || isMuted) return;
            
            const audio = audioElements[name];
            if (!audio) return;
            
            audio.loop = loop;
            audio.currentTime = 0;
            audio.play().catch(() => {});
        }

        function stopAudio(name) {
            const audio = audioElements[name];
            if (audio) {
                audio.pause();
                audio.currentTime = 0;
            }
        }

        function stopAllAudio() {
            Object.keys(audioElements).forEach(name => stopAudio(name));
        }

        // Initialize Background Effects
        function initializeEffects() {
            const particleCount = window.matchMedia('(max-width: 768px)').matches ? 25 : 50;
            for (let i = 0; i < particleCount; i++) {
                createParticle();
            }

            for (let i = 0; i < 30; i++) {
                const bar = document.createElement('div');
                bar.className = 'wave-bar';
                bar.style.animationDelay = `${i * 0.05}s`;
                bar.style.height = `${Math.random() * 30 + 20}px`;
                soundWaves.appendChild(bar);
            }
        }

        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = `${Math.random() * 100}%`;
            particle.style.animationDuration = `${Math.random() * 10 + 10}s`;
            particle.style.animationDelay = `${Math.random() * 10}s`;
            
            const colors = ['var(--neon-cyan)', 'var(--neon-magenta)', 'var(--neon-yellow)'];
            particle.style.background = colors[Math.floor(Math.random() * colors.length)];
            particle.style.boxShadow = `0 0 10px ${particle.style.background}`;
            
            particles.appendChild(particle);
        }

        // Wheel Interactions
        function addWheelInteractions(wheel) {
            wheel.addEventListener('mouseenter', () => {
                if (!isSpinning) {
                    createPulseEffect(wheel);
                }
            });

            wheel.addEventListener('click', () => {
                if (!isSpinning) {
                    spinBothWheels();
                }
            });
        }

        function createPulseEffect(wheel) {
            const pulse = document.createElement('div');
            pulse.className = 'pulse';
            wheel.querySelector('.wheel-face').appendChild(pulse);
            setTimeout(() => pulse.remove(), 2000);
        }

        // Toggle Audio - Fixed for first unmute
        function toggleAudio() {
            // Special handling for first unmute
            if (isFirstUnmute && isMuted) {
                isFirstUnmute = false;
                isMuted = false;
                audioControls.classList.remove('muted');
                
                // Stop any playing audio immediately
                stopAllAudio();
                
                // Small delay then start background music
                setTimeout(() => {
                    if (!isMuted && audioUnlocked && !isSpinning) {
                        playAudio('background', true);
                    }
                }, 100);
                
                return;
            }
            
            // Normal toggle
            isMuted = !isMuted;
            audioControls.classList.toggle('muted', isMuted);
            
            if (isMuted) {
                stopAllAudio();
            } else if (audioUnlocked && !isSpinning) {
                playAudio('background', true);
            }
        }

        // Spinning Logic
        function spinBothWheels() {
            if (isSpinning) return;

            isSpinning = true;
            spinButton.disabled = true;

            // Audio handling
            stopAudio('background');
            playAudio('spin');
            
            // Start tension audio after spin sound
            setTimeout(() => {
                if (isSpinning) {
                    playAudio('tension', true);
                }
            }, 500);

            // Add spinning class
            numberWheel.classList.add('spinning');
            nameWheel.classList.add('spinning');

            // Random spinning duration between 5-20 seconds
            const spinDuration = Math.random() * 15000 + 5000;

            // Animate values during spin
            const valueInterval = setInterval(() => {
                numberValue.textContent = Math.floor(Math.random() * 10) + 1;
                const randomIndex = Math.floor(Math.random() * names.length);
                nameValue.textContent = shortNames[randomIndex];
            }, 100);

            // Stop spinning
            setTimeout(() => {
                clearInterval(valueInterval);
                
                // Final values
                selectedNumber = Math.floor(Math.random() * 10) + 1;
                selectedIndex = Math.floor(Math.random() * names.length);
                selectedName = names[selectedIndex];
                
                numberValue.textContent = selectedNumber;
                nameValue.textContent = shortNames[selectedIndex];
                
                // Remove spinning class
                numberWheel.classList.remove('spinning');
                nameWheel.classList.remove('spinning');
                
                // Stop tension audio
                stopAudio('tension');
                
                // Show result after a brief pause
                setTimeout(() => {
                    showResult();
                    isSpinning = false;
                    spinButton.disabled = false;
                }, 500);
            }, spinDuration);
        }

        // Result Display
        function showResult() {
            resultName.textContent = selectedName;
            resultNumber.textContent = selectedNumber;
            resultPhrase.textContent = phrases[Math.floor(Math.random() * phrases.length)];
            
            resultOverlay.classList.add('active');
            createConfetti();
            
            // Play applaud sound
            playAudio('applaud');
            
            // Get applaud duration or use fallback
            const applaudDuration = audioElements.applaud.duration * 1000 || 5000;
            
            // Auto-hide after applaud duration
            setTimeout(() => {
                hideResult();
            }, applaudDuration);
        }

        function hideResult() {
            resultOverlay.classList.remove('active');
            clearConfetti();
            stopAudio('applaud');
            
            // Resume background music
            if (!isMuted && audioUnlocked) {
                playAudio('background', true);
            }
        }

        // Confetti Effect
        function createConfetti() {
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#ff1493'];
            
            for (let i = 0; i < 100; i++) {
                setTimeout(() => {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = `${Math.random() * 100}%`;
                    confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.animationDelay = `${Math.random() * 0.5}s`;
                    confetti.style.animationDuration = `${Math.random() * 2 + 3}s`;
                    confettiContainer.appendChild(confetti);
                }, i * 10);
            }
        }

        function clearConfetti() {
            setTimeout(() => {
                confettiContainer.innerHTML = '';
            }, 3000);
        }

        // Mouse Parallax Effect
        document.addEventListener('mousemove', (e) => {
            const x = (e.clientX / window.innerWidth - 0.5) * 20;
            const y = (e.clientY / window.innerHeight - 0.5) * 20;
            
            document.querySelector('.gradient-bg').style.transform = 
                `translate(${x}px, ${y}px) rotate(${x}deg)`;
        });

        // Keyboard Support
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case ' ':
                case 'Enter':
                    e.preventDefault();
                    if (!isSpinning && !resultOverlay.classList.contains('active')) {
                        spinBothWheels();
                    }
                    break;
                    
                case 'Escape':
                    if (resultOverlay.classList.contains('active')) {
                        hideResult();
                    }
                    break;
                    
                case 'm':
                case 'M':
                    toggleAudio();
                    break;
            }
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            // Show initial status
            audioStatus.textContent = 'Klicken Sie irgendwo, um Audio zu aktivieren';
            audioStatus.classList.add('visible');
            
            initializeEffects();
            
            // Add wheel interactions
            addWheelInteractions(numberWheel);
            addWheelInteractions(nameWheel);
            
            // Button listeners
            spinButton.addEventListener('click', spinBothWheels);
            audioControls.addEventListener('click', toggleAudio);
            
            // Result overlay click handler
            resultOverlay.addEventListener('click', (e) => {
                if (e.target === resultOverlay) {
                    hideResult();
                }
            });
            
            // Unlock audio on first user interaction
            const unlockHandler = () => {
                unlockAllAudio();
                document.removeEventListener('click', unlockHandler);
                document.removeEventListener('touchstart', unlockHandler);
                document.removeEventListener('keydown', unlockHandler);
            };
            
            document.addEventListener('click', unlockHandler, { once: true });
            document.addEventListener('touchstart', unlockHandler, { once: true });
            document.addEventListener('keydown', unlockHandler, { once: true });
        });
    </script>
</body>
</html>
