<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="title" content="Das ultimative Glücksrad-Spektakel">
    <meta name="description" content="Ein interaktives Glücksrad-Spiel mit modernem Design">
    <link rel="icon" type="image/svg" href="/LogoPlainSVG.svg">
    <title>Rheinfallspinsel - Glücksrad Deluxe</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --gold-gradient: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
            --neon-cyan: #00ffff;
            --neon-magenta: #ff00ff;
            --neon-yellow: #ffff00;
            --dark-bg: #0a0a0a;
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            min-height: 100vh;
            background: var(--dark-bg);
            color: white;
            overflow-x: hidden;
            position: relative;
        }

        /* Animated Background */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
            overflow: hidden;
        }

        .gradient-bg {
            position: absolute;
            width: 200%;
            height: 200%;
            top: -50%;
            left: -50%;
            background: radial-gradient(ellipse at center, #1a1a2e 0%, #0a0a0a 50%);
            animation: rotateGradient 20s ease infinite;
        }

        @keyframes rotateGradient {
            0% { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.2); }
            100% { transform: rotate(360deg) scale(1); }
        }

        /* Particle System */
        .particles {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: var(--neon-cyan);
            border-radius: 50%;
            filter: blur(1px);
            animation: floatParticle linear infinite;
            box-shadow: 0 0 10px var(--neon-cyan);
        }

        @keyframes floatParticle {
            from {
                transform: translateY(100vh) translateX(0);
                opacity: 0;
            }
            10% { opacity: 1; }
            90% { opacity: 1; }
            to {
                transform: translateY(-100vh) translateX(100px);
                opacity: 0;
            }
        }

        /* Neon Grid */
        .neon-grid {
            position: absolute;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: gridMove 10s linear infinite;
        }

        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }

        /* Main Container */
        .main-container {
            position: relative;
            z-index: 10;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        /* Title */
        .title {
            font-size: clamp(2rem, 5vw, 4rem);
            font-weight: 900;
            text-align: center;
            margin-bottom: 3rem;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
            animation: titleGlow 3s ease-in-out infinite;
            position: relative;
        }

        @keyframes titleGlow {
            0%, 100% { filter: brightness(1); }
            50% { filter: brightness(1.2); }
        }

        .title::after {
            content: 'GLÜCKSRAD DELUXE';
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: var(--secondary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            z-index: -1;
            animation: titleShift 4s ease-in-out infinite;
        }

        @keyframes titleShift {
            0%, 100% { transform: translate(0, 0); }
            50% { transform: translate(3px, 3px); }
        }

        /* Wheel Container */
        .wheels-container {
            display: flex;
            gap: 4rem;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 3rem;
        }

        /* Individual Wheel */
        .wheel-wrapper {
            position: relative;
            width: 280px;
            height: 280px;
            perspective: 1000px;
        }

        .wheel {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            cursor: pointer;
        }

        .wheel:hover {
            transform: rotateY(15deg) rotateX(-10deg) scale(1.05);
        }

        .wheel-face {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: 700;
            backdrop-filter: blur(10px);
            background: var(--glass-bg);
            border: 2px solid var(--glass-border);
            box-shadow: 
                0 0 40px rgba(0, 255, 255, 0.5),
                inset 0 0 40px rgba(255, 255, 255, 0.1);
            overflow: hidden;
        }

        .wheel-face::before {
            content: '';
            position: absolute;
            width: 150%;
            height: 150%;
            background: conic-gradient(
                from 0deg,
                transparent,
                var(--neon-cyan),
                transparent,
                var(--neon-magenta),
                transparent
            );
            animation: wheelSpin 4s linear infinite;
            opacity: 0.3;
        }

        @keyframes wheelSpin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .wheel-face::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(
                circle at 30% 30%,
                rgba(255, 255, 255, 0.3),
                transparent 50%
            );
            border-radius: 50%;
        }

        .wheel-content {
            position: relative;
            z-index: 1;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .wheel-label {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 0.5rem;
        }

        .wheel-value {
            font-size: 2rem;
            text-shadow: 0 0 20px currentColor;
        }

        #numberWheel .wheel-face {
            background: linear-gradient(135deg, rgba(255, 0, 0, 0.1), rgba(255, 100, 0, 0.1));
            border-color: rgba(255, 0, 0, 0.3);
            color: #ff6b6b;
        }

        #nameWheel .wheel-face {
            background: linear-gradient(135deg, rgba(0, 123, 255, 0.1), rgba(0, 200, 255, 0.1));
            border-color: rgba(0, 123, 255, 0.3);
            color: #4dabf7;
        }

        /* Spinning Animation */
        .wheel.spinning .wheel-face {
            animation: superSpin 0.1s linear infinite;
        }

        @keyframes superSpin {
            0% { transform: rotateZ(0deg); }
            100% { transform: rotateZ(360deg); }
        }

        /* Control Panel */
        .control-panel {
            display: flex;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .spin-button {
            padding: 1rem 3rem;
            font-size: 1.2rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 2px;
            background: var(--accent-gradient);
            border: none;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.4);
        }

        .spin-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(79, 172, 254, 0.6);
        }

        .spin-button:active {
            transform: translateY(0);
        }

        .spin-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.5);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .spin-button:active::before {
            width: 300px;
            height: 300px;
        }

        .spin-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Result Display */
        .result-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
        }

        .result-overlay.active {
            display: flex;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .result-content {
            text-align: center;
            animation: resultBounce 0.6s ease;
        }

        @keyframes resultBounce {
            0% { transform: scale(0) rotate(180deg); }
            50% { transform: scale(1.2) rotate(90deg); }
            100% { transform: scale(1) rotate(0deg); }
        }

        .result-title {
            font-size: clamp(3rem, 8vw, 6rem);
            font-weight: 900;
            background: var(--gold-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 2rem;
            animation: resultGlow 1s ease infinite alternate;
        }

        @keyframes resultGlow {
            from { filter: brightness(1) drop-shadow(0 0 20px gold); }
            to { filter: brightness(1.3) drop-shadow(0 0 40px gold); }
        }

        .result-details {
            font-size: clamp(1.5rem, 4vw, 2.5rem);
            margin-bottom: 1rem;
            color: white;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
        }

        .result-phrase {
            font-size: clamp(1rem, 2.5vw, 1.5rem);
            font-style: italic;
            opacity: 0.8;
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }

        /* Confetti */
        .confetti-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1001;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background: var(--neon-cyan);
            animation: confettiFall 3s ease-out forwards;
        }

        @keyframes confettiFall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }

        /* Floating Elements */
        .floating-elements {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
        }

        .floating-word {
            position: absolute;
            font-size: 1rem;
            opacity: 0.1;
            color: var(--neon-cyan);
            animation: floatWord 20s infinite;
            text-shadow: 0 0 10px currentColor;
        }

        @keyframes floatWord {
            0% {
                transform: translate(0, 100vh) rotate(0deg);
            }
            100% {
                transform: translate(100vw, -100vh) rotate(360deg);
            }
        }

        /* Audio Controls */
        .audio-controls {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 100;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            border: 1px solid var(--glass-border);
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .audio-controls:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .audio-icon {
            width: 24px;
            height: 24px;
            position: relative;
        }

        .audio-icon::before {
            content: '🔊';
            font-size: 20px;
        }

        .audio-controls.muted .audio-icon::before {
            content: '🔇';
        }

        /* Mobile Optimizations */
        @media (max-width: 768px) {
            .wheels-container {
                gap: 2rem;
            }

            .wheel-wrapper {
                width: 200px;
                height: 200px;
            }

            .control-panel {
                flex-direction: column;
                width: 100%;
                max-width: 300px;
            }

            .spin-button {
                width: 100%;
            }
        }

        /* Reduced Motion */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.001ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.001ms !important;
            }
        }

        /* Loading Animation */
        .loader {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100px;
            height: 100px;
            z-index: 2000;
        }

        .loader-circle {
            width: 100%;
            height: 100%;
            border: 4px solid transparent;
            border-top-color: var(--neon-cyan);
            border-radius: 50%;
            animation: loaderSpin 1s linear infinite;
        }

        @keyframes loaderSpin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Pulse Effect */
        .pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle, transparent, var(--neon-cyan));
            animation: pulse 2s ease-out;
            pointer-events: none;
        }

        @keyframes pulse {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }

        /* Stats Display */
        .stats-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            padding: 1rem;
            border-radius: 10px;
            border: 1px solid var(--glass-border);
            font-size: 0.9rem;
            opacity: 0.7;
            transition: opacity 0.3s ease;
        }

        .stats-container:hover {
            opacity: 1;
        }

        /* Sound Wave Visualization */
        .sound-waves {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100px;
            display: flex;
            align-items: flex-end;
            justify-content: center;
            gap: 4px;
            pointer-events: none;
            z-index: 5;
        }

        .wave-bar {
            width: 4px;
            background: linear-gradient(to top, var(--neon-cyan), transparent);
            animation: wave 1s ease-in-out infinite;
            opacity: 0.3;
        }

        @keyframes wave {
            0%, 100% { height: 20px; }
            50% { height: 60px; }
        }
    </style>
</head>
<body>
    <!-- Audio Elements -->
    <audio id="backgroundAudio" loop>
        <source src="background.wav" type="audio/wav">
    </audio>
    <audio id="spinAudio">
        <source src="spin.wav" type="audio/wav">
    </audio>
    <audio id="tensionAudio" loop>
        <source src="tension.wav" type="audio/wav">
    </audio>
    <audio id="applaudAudio">
        <source src="applaud.wav" type="audio/wav">
    </audio>

    <!-- Audio Controls -->
    <div class="audio-controls" id="audioControls">
        <div class="audio-icon"></div>
        <span>Sound</span>
    </div>

    <!-- Background Elements -->
    <div class="background-container">
        <div class="gradient-bg"></div>
        <div class="neon-grid"></div>
        <div class="particles" id="particles"></div>
    </div>

    <!-- Floating Elements -->
    <div class="floating-elements" id="floatingElements"></div>

    <!-- Sound Waves -->
    <div class="sound-waves" id="soundWaves"></div>

    <!-- Main Content -->
    <div class="main-container">
        <h1 class="title">GLÜCKSRAD DELUXE</h1>

        <div class="wheels-container">
            <!-- Number Wheel -->
            <div class="wheel-wrapper">
                <div class="wheel" id="numberWheel">
                    <div class="wheel-face">
                        <div class="wheel-content">
                            <div class="wheel-label">Anzahl</div>
                            <div class="wheel-value" id="numberValue">?</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Name Wheel -->
            <div class="wheel-wrapper">
                <div class="wheel" id="nameWheel">
                    <div class="wheel-face">
                        <div class="wheel-content">
                            <div class="wheel-label">Name</div>
                            <div class="wheel-value" id="nameValue">?</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="control-panel">
            <button class="spin-button" id="spinBoth">Beide drehen!</button>
        </div>
    </div>

    <!-- Result Overlay -->
    <div class="result-overlay" id="resultOverlay">
        <div class="result-content">
            <h2 class="result-title">GEWINNER!</h2>
            <div class="result-details">
                <span id="resultName"></span> - <span id="resultNumber"></span> Striche
            </div>
            <div class="result-phrase" id="resultPhrase"></div>
        </div>
    </div>

    <!-- Confetti Container -->
    <div class="confetti-container" id="confettiContainer"></div>

    <!-- Stats Display -->
    <div class="stats-container">
        <div>Spins: <span id="spinCount">0</span></div>
    </div>

    <script>
        // Game Data
        const names = [
            "Ferdinand I (Reytschack)", "Jonas von der Feuerwehr", "S.M. Johannes B. Beeten", 
            "Enno aus Köln", "Rolls Royce Robert", "Ferdinand II (Henze)", "Fréddé", 
            "Jakob II (Alberts)", "Frisch", "Ole", "Kalle", "Maxi", "Max I (Zimmer)", 
            "Leonard Wehrmeister", "Michi, auch von der Feuerwehr", "Fabi der Schnelle"
        ];

        const phrases = [
            "Wow, du bist so unglaublich talentiert.",
            "Herzlichen Glückwunsch! Deine Fähigkeit, alle anderen zu überraschen, ist wirklich beeindruckend.",
            "Bravo! Deine Leistung ist wirklich außergewöhnlich.",
            "Ein Meister ist geboren!",
            "Du hast es geschafft, allen anderen zu beweisen, dass du immer im Mittelpunkt stehen kannst.",
            "Großartig! Deine Fähigkeiten sind bewundernswert.",
            "Hervorragend! Du bist wie ein lebendiger Beweis dafür, dass nicht alles auf der Welt schlecht ist.",
            "Warum so wenig?",
            "Nochmal!!!",
            "Mehr, mehr, mehr …",
            "Herrlich!",
            "Gratulation! Du bist der wahre Held der unerwarteten Wendungen.",
            "Ein weiterer Höhepunkt in deiner Karriere bei den Rheinfallspinseln.",
            "Fantastisch!",
            "Wie hast du das nur geschafft?",
            "Du machst uns alle stolz.",
            "Ein wahrer Glückspilz.",
            "Hochmut kommt vor dem Fall.",
            "Das ist fair.",
            "Super! Deine Eltern wären stolz auf dich.",
            "Kaum zu glauben."
        ];

        const floatingWords = [
            "Rheinfallspinsel", "Neuss", "Bier", "Quirinus-Gymnasium", "Schützenlust", 
            "Weizen", "Fässchen", "Zigarre", "Für Deutschland", "Der Spieß ist ein ******", 
            "Finger im Po, Mexiko", "Pils", "Altbier", "Kölsch", "Skifahren", "Pistenbulli", 
            "Bobrennen", "Layla", "Jutta", "Olivia", "Laura", "Annalena", "Belinda", "Bagger"
        ];

        // DOM Elements
        const numberWheel = document.getElementById('numberWheel');
        const nameWheel = document.getElementById('nameWheel');
        const numberValue = document.getElementById('numberValue');
        const nameValue = document.getElementById('nameValue');
        const spinButton = document.getElementById('spinBoth');
        const resultOverlay = document.getElementById('resultOverlay');
        const resultName = document.getElementById('resultName');
        const resultNumber = document.getElementById('resultNumber');
        const resultPhrase = document.getElementById('resultPhrase');
        const confettiContainer = document.getElementById('confettiContainer');
        const spinCount = document.getElementById('spinCount');
        const particles = document.getElementById('particles');
        const floatingElements = document.getElementById('floatingElements');
        const soundWaves = document.getElementById('soundWaves');
        const audioControls = document.getElementById('audioControls');

        // Audio Elements
        const backgroundAudio = document.getElementById('backgroundAudio');
        const spinAudio = document.getElementById('spinAudio');
        const tensionAudio = document.getElementById('tensionAudio');
        const applaudAudio = document.getElementById('applaudAudio');

        // Game State
        let isSpinning = false;
        let totalSpins = 0;
        let selectedName = '';
        let selectedNumber = 0;
        let isMuted = false;
        let applaudDuration = 0;

        // Initialize Audio
        function initializeAudio() {
            // Set volumes
            backgroundAudio.volume = 0.3;
            spinAudio.volume = 0.5;
            tensionAudio.volume = 0.4;
            applaudAudio.volume = 0.6;

            // Start background music
            backgroundAudio.play().catch(e => {
                console.log('Autoplay prevented, user interaction required');
            });

            // Get applaud duration when metadata is loaded
            applaudAudio.addEventListener('loadedmetadata', () => {
                applaudDuration = applaudAudio.duration * 1000; // Convert to milliseconds
            });

            // Audio control toggle
            audioControls.addEventListener('click', toggleAudio);
        }

        function toggleAudio() {
            isMuted = !isMuted;
            audioControls.classList.toggle('muted', isMuted);
            
            if (isMuted) {
                backgroundAudio.pause();
                tensionAudio.pause();
                applaudAudio.pause();
            } else {
                if (!isSpinning) {
                    backgroundAudio.play();
                }
            }
        }

        // Initialize Background Effects
        function initializeEffects() {
            // Create particles
            for (let i = 0; i < 50; i++) {
                createParticle();
            }

            // Create floating words
            floatingWords.forEach((word, index) => {
                setTimeout(() => createFloatingWord(word), index * 200);
            });

            // Create sound wave bars
            for (let i = 0; i < 30; i++) {
                const bar = document.createElement('div');
                bar.className = 'wave-bar';
                bar.style.animationDelay = `${i * 0.05}s`;
                bar.style.height = `${Math.random() * 40 + 20}px`;
                soundWaves.appendChild(bar);
            }
        }

        function createParticle() {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = `${Math.random() * 100}%`;
            particle.style.animationDuration = `${Math.random() * 10 + 10}s`;
            particle.style.animationDelay = `${Math.random() * 10}s`;
            
            const colors = ['var(--neon-cyan)', 'var(--neon-magenta)', 'var(--neon-yellow)'];
            particle.style.background = colors[Math.floor(Math.random() * colors.length)];
            particle.style.boxShadow = `0 0 10px ${particle.style.background}`;
            
            particles.appendChild(particle);
        }

        function createFloatingWord(word) {
            const element = document.createElement('div');
            element.className = 'floating-word';
            element.textContent = word;
            element.style.left = `${Math.random() * 100}%`;
            element.style.animationDuration = `${Math.random() * 20 + 20}s`;
            element.style.animationDelay = `${Math.random() * 10}s`;
            floatingElements.appendChild(element);
        }

        // Wheel Interactions
        function addWheelInteractions(wheel) {
            wheel.addEventListener('mouseenter', () => {
                if (!isSpinning) {
                    createPulseEffect(wheel);
                }
            });

            wheel.addEventListener('click', () => {
                if (!isSpinning) {
                    spinBothWheels();
                }
            });
        }

        function createPulseEffect(wheel) {
            const pulse = document.createElement('div');
            pulse.className = 'pulse';
            wheel.querySelector('.wheel-face').appendChild(pulse);
            setTimeout(() => pulse.remove(), 2000);
        }

        // Spinning Logic
        function spinBothWheels() {
            if (isSpinning) return;

            isSpinning = true;
            spinButton.disabled = true;
            totalSpins++;
            spinCount.textContent = totalSpins;

            // Audio handling
            if (!isMuted) {
                backgroundAudio.pause();
                spinAudio.play();
                spinAudio.addEventListener('ended', () => {
                    if (!isMuted) {
                        tensionAudio.play();
                    }
                }, { once: true });
            }

            // Add spinning class
            numberWheel.classList.add('spinning');
            nameWheel.classList.add('spinning');

            // Random spinning duration between 5-15 seconds
            const spinDuration = Math.random() * 10000 + 5000;

            // Animate values during spin
            const valueInterval = setInterval(() => {
                numberValue.textContent = Math.floor(Math.random() * 10) + 1;
                nameValue.textContent = names[Math.floor(Math.random() * names.length)].split(' ')[0];
            }, 100);

            // Stop spinning
            setTimeout(() => {
                clearInterval(valueInterval);
                
                // Final values
                selectedNumber = Math.floor(Math.random() * 10) + 1;
                selectedName = names[Math.floor(Math.random() * names.length)];
                
                numberValue.textContent = selectedNumber;
                nameValue.textContent = selectedName.split(' ')[0];
                
                // Remove spinning class
                numberWheel.classList.remove('spinning');
                nameWheel.classList.remove('spinning');
                
                // Stop tension audio
                if (!isMuted) {
                    tensionAudio.pause();
                    tensionAudio.currentTime = 0;
                }
                
                // Show result after a brief pause
                setTimeout(() => {
                    showResult();
                    isSpinning = false;
                    spinButton.disabled = false;
                }, 500);
            }, spinDuration);
        }

        // Result Display
        function showResult() {
            resultName.textContent = selectedName;
            resultNumber.textContent = selectedNumber;
            resultPhrase.textContent = phrases[Math.floor(Math.random() * phrases.length)];
            
            resultOverlay.classList.add('active');
            createConfetti();
            
            // Play applaud sound
            if (!isMuted) {
                applaudAudio.play();
            }
            
            // Use applaud duration or fallback to 5 seconds
            const displayDuration = applaudDuration || 5000;
            
            // Auto-hide after applaud duration
            setTimeout(() => {
                resultOverlay.classList.remove('active');
                clearConfetti();
                
                // Resume background music
                if (!isMuted) {
                    applaudAudio.pause();
                    applaudAudio.currentTime = 0;
                    backgroundAudio.play();
                }
            }, displayDuration);
        }

        // Confetti Effect
        function createConfetti() {
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#ff1493'];
            
            for (let i = 0; i < 100; i++) {
                setTimeout(() => {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = `${Math.random() * 100}%`;
                    confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.animationDelay = `${Math.random() * 0.5}s`;
                    confetti.style.animationDuration = `${Math.random() * 2 + 3}s`;
                    confettiContainer.appendChild(confetti);
                }, i * 10);
            }
        }

        function clearConfetti() {
            setTimeout(() => {
                confettiContainer.innerHTML = '';
            }, 3000);
        }

        // Mouse Parallax Effect
        document.addEventListener('mousemove', (e) => {
            const x = (e.clientX / window.innerWidth - 0.5) * 20;
            const y = (e.clientY / window.innerHeight - 0.5) * 20;
            
            document.querySelector('.gradient-bg').style.transform = 
                `translate(${x}px, ${y}px) rotate(${x}deg)`;
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            initializeEffects();
            initializeAudio();
            addWheelInteractions(numberWheel);
            addWheelInteractions(nameWheel);
            spinButton.addEventListener('click', spinBothWheels);
            
            // Close result overlay on click (but respect applaud duration)
            resultOverlay.addEventListener('click', () => {
                // Don't allow closing while applaud is playing
                if (!applaudAudio.paused) return;
                
                resultOverlay.classList.remove('active');
                clearConfetti();
            });

            // Try to start background music on first user interaction
            document.addEventListener('click', () => {
                if (!isMuted && backgroundAudio.paused && !isSpinning) {
                    backgroundAudio.play();
                }
            }, { once: true });
        });

        // Performance optimization - reduce particles on mobile
        if (window.matchMedia('(max-width: 768px)').matches) {
            document.querySelectorAll('.particle').forEach((particle, index) => {
                if (index > 20) particle.remove();
            });
        }

        // Add keyboard support
        document.addEventListener('keydown', (e) => {
            if (e.key === ' ' && !isSpinning) {
                e.preventDefault();
                spinBothWheels();
            }
            if (e.key === 'Escape' && resultOverlay.classList.contains('active') && applaudAudio.paused) {
                resultOverlay.classList.remove('active');
                clearConfetti();
            }
        });
    </script>
</body>
</html>
